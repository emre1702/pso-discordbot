generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_DIRECT_URL")
}

model discord_users {
  id                                    String       @id(map: "discord-user_pkey")
  created_at                            DateTime     @default(now()) @db.Timestamptz(6)
  language                              language?
  team_roles                            team_roles[]
  teams_teams_created_byTodiscord_users teams[]      @relation("teams_created_byTodiscord_users")
  teams_teams_ownerTodiscord_users      teams[]      @relation("teams_ownerTodiscord_users")

  @@map("discord-users")
}

model guilds {
  id             String   @id
  joined_at      DateTime @default(now()) @db.Timestamptz(6)
  last_joined_at DateTime @default(now()) @db.Timestamptz(6)
  teams          teams[]
}

model team_roles {
  team_id       String        @db.Uuid
  user_id       String
  created_at    DateTime      @default(now()) @db.Timestamptz(6)
  role          team_role?    @default(Player)
  teams         teams         @relation(fields: [team_id], references: [id], onDelete: Cascade)
  discord_users discord_users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([team_id, user_id])
  @@map("team-roles")
}

model teams {
  id                                            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                          String
  short_name                                    String
  created_at                                    DateTime       @default(now()) @db.Timestamptz(6)
  created_by                                    String?        @default("NULL")
  owner                                         String?        @default("NULL")
  guild_id                                      String?
  matches_matches_away_team_idToteams           matches[]      @relation("matches_away_team_idToteams")
  matches_matches_home_team_idToteams           matches[]      @relation("matches_home_team_idToteams")
  seasons                                       seasons[]
  team_roles                                    team_roles[]
  discord_users_teams_created_byTodiscord_users discord_users? @relation("teams_created_byTodiscord_users", fields: [created_by], references: [id])
  guilds                                        guilds?        @relation(fields: [guild_id], references: [id], onDelete: Cascade)
  discord_users_teams_ownerTodiscord_users      discord_users? @relation("teams_ownerTodiscord_users", fields: [owner], references: [id])
}

model matches {
  id                                BigInt   @id @default(autoincrement())
  created_at                        DateTime @default(now()) @db.Timestamptz(6)
  home_team_id                      String?  @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  away_team_id                      String?  @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  home_score                        Int?     @db.SmallInt
  away_score                        Int?     @db.SmallInt
  season_id                         String?  @db.Uuid
  teams_matches_away_team_idToteams teams?   @relation("matches_away_team_idToteams", fields: [away_team_id], references: [id])
  teams_matches_home_team_idToteams teams?   @relation("matches_home_team_idToteams", fields: [home_team_id], references: [id])
  seasons                           seasons? @relation(fields: [season_id], references: [id])
}

model seasons {
  season             Int       @unique @db.SmallInt
  from_date          DateTime? @db.Timestamptz(6)
  to_date            DateTime? @db.Timestamptz(6)
  champion_team_id   String?   @db.Uuid
  champion_team_name String?
  created_at         DateTime  @default(now()) @db.Timestamptz(6)
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  matches            matches[]
  teams              teams?    @relation(fields: [champion_team_id], references: [id])
}

model guild_settings {
  guild_id   String
  setting    guild_setting
  value      String?
  created_at DateTime      @default(now()) @db.Timestamptz(6)

  @@id([guild_id, setting])
  @@map("guild-settings")
}

enum language {
  en
  tr
}

enum team_role {
  Player
  Co_Captain @map("Co-Captain")
  Captain
}

enum guild_setting {
  language

  @@map("guild-setting")
}
